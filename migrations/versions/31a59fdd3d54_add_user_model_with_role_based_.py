"""Add User model with role-based validation and password hashing

Revision ID: 31a59fdd3d54
Revises:
Create Date: 2025-09-10 11:22:24.490681

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "31a59fdd3d54"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create enum type if it doesn't exist using raw SQL
    connection = op.get_bind()
    connection.execute(sa.text("""
        DO $$ BEGIN
            CREATE TYPE user_roles AS ENUM ('ADMIN', 'TENANT', 'TENANT_STAFF', 'CUSTOMER');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """))
    
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("phone", sa.String(length=20), nullable=True),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM("ADMIN", "TENANT", "TENANT_STAFF", "CUSTOMER", name="user_roles", create_type=False),
            nullable=False,
        ),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("verified_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_phone"), "users", ["phone"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_phone"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    
    # Drop enum type if it exists using raw SQL
    connection = op.get_bind()
    connection.execute(sa.text("DROP TYPE IF EXISTS user_roles"))
    # ### end Alembic commands ###
